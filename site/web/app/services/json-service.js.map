{"version":3,"sources":["app/services/json-service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAaA;gBAII,qBAAoB,IAAU;oBAAV,SAAI,GAAJ,IAAI,CAAM;oBAFtB,aAAQ,GAAG,eAAe,CAAC,CAAE,iBAAiB;oBAGlD,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;gBAC9C,CAAC;gBAED,kCAAY,GAAZ;oBACI,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;oBAE3C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,iBAAiB,CAAC;yBAIlD,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC;yBACtB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBACjC,CAAC;gBAEO,iCAAW,GAAnB,UAAoB,KAAqB;oBACrC,4CAA4C;oBAE5C,oEAAoE;oBACpE,IAAI,MAAc,CAAC;oBACnB,EAAE,CAAC,CAAC,KAAK,YAAY,eAAQ,CAAC,CAAC,CAAC;wBAC5B,IAAM,IAAI,GAAG,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC;wBAChC,IAAM,GAAG,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;wBAC/C,MAAM,GAAM,KAAK,CAAC,MAAM,YAAM,KAAK,CAAC,UAAU,IAAI,EAAE,UAAI,GAAK,CAAC;oBAClE,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,MAAM,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;oBAC9D,CAAC;oBACD,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,MAAM,CAAC,CAAC;oBAClD,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBACpC,CAAC;gBAEO,kCAAY,GAApB,UAAqB,GAAa;oBAC9B,OAAO,CAAC,GAAG,CAAC,2BAA2B,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;oBACrD,MAAM,CAAC,mBAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;gBAC5C,CAAC;gBAvCL;oBAAC,iBAAU,EAAE;;+BAAA;gBAyCb,kBAAC;YAAD,CAxCA,AAwCC,IAAA;YAxCD,qCAwCC,CAAA","file":"json-service.js","sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport { Http, Response } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\n// Import RxJs required methods\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/observable/throw';\r\n\r\n// Model\r\nimport {Language} from \"../models/language\";\r\n\r\n@Injectable()\r\nexport class JsonService {\r\n\r\n    private _dataUrl = './assets/data';  // URL to web API\r\n\r\n    constructor(private http: Http) {\r\n        console.log('JsonService::constructor()');\r\n    }\r\n\r\n    getLanguages(): Observable<Language[]> {\r\n        console.log('JsonService::getLanguages()');\r\n\r\n        return this.http.get(this._dataUrl + '/languages.json')\r\n\r\n            // ...and calling .json() on the response to return data\r\n            //.map((response: Response) => response.json() as Language)\r\n            .map(this.mapLanguages)\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    private handleError(error: Response | any) {\r\n        //console.error('JsonService::handleError');\r\n\r\n        // In a real world app, we might use a remote logging infrastructure\r\n        let errMsg: string;\r\n        if (error instanceof Response) {\r\n            const body = error.json() || '';\r\n            const err = body.error || JSON.stringify(body);\r\n            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\r\n        } else {\r\n            errMsg = error.message ? error.message : error.toString();\r\n        }\r\n        console.error('JsonService::handleError', errMsg);\r\n        return Observable.throw(errMsg);\r\n    }\r\n\r\n    private mapLanguages(res: Response) {\r\n        console.log('JsonService::mapLanguages', res.json());\r\n        return Language.asLanguages(res.json());\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"/src"}